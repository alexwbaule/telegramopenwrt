# Nome do Workflow: Exibido na interface do GitHub Actions
name: Build telegram-openwrt Package

# Gatilhos (Triggers): Quando este workflow será executado
on:
  push:
    branches:
      - master # Branch principal do seu repositório telegramopenwrt
      # Se você usa 'main' ou outra branch, ajuste aqui.
  # Permite acionamento manual a partir da aba "Actions" do GitHub
  workflow_dispatch:
    inputs:
      openwrt_version:
        description: 'Versão do OpenWrt ou "snapshots"'
        required: true
        default: 'v23.05.3' # Sugestão de uma versão estável recente
      target_architecture:
        description: 'Target OpenWrt (ex: x86/64, mediatek/filogic, ou deixe em branco para x86/64 padrão)'
        required: false
        default: 'x86/64' # Target genérico para compilar pacotes .ipk

# Jobs: Define um ou mais trabalhos a serem executados
jobs:
  build_package:
    name: Build for OpenWrt ${{ github.event.inputs.openwrt_version || 'v23.05.3' }} (${{ github.event.inputs.target_architecture || 'x86/64' }})
    runs-on: ubuntu-latest # Ambiente de execução

    env:
      # Variáveis de ambiente disponíveis para todas as etapas deste job
      PACKAGE_NAME: telegram-openwrt # Nome do seu pacote (com hífen)
      # Define a versão do OpenWrt. Usa o input do workflow_dispatch ou um padrão.
      OPENWRT_VERSION: ${{ github.event.inputs.openwrt_version || 'v23.05.3' }}
      # Define o target. Usa o input ou um padrão.
      TARGET_ARCH_INPUT: ${{ github.event.inputs.target_architecture || 'x86/64' }}

    steps:
      # Etapa 1: Checkout do código do seu pacote telegram-openwrt
      - name: Checkout telegram-openwrt package repository
        uses: actions/checkout@v4

      # Etapa 2: Instalação das dependências de compilação do OpenWrt no executor Ubuntu
      - name: Install OpenWrt build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            build-essential clang flex bison g++ gawk \
            gcc-multilib g++-multilib gettext git libncurses5-dev \
            libssl-dev python3 python3-distutils rsync \
            unzip zlib1g-dev file wget subversion ca-certificates

      # Etapa 3: Configuração do ambiente de compilação do OpenWrt SDK
      - name: Setup OpenWrt build environment
        run: |
          echo "Usando OpenWrt versão/branch: ${OPENWRT_VERSION}"
          if [[ "${OPENWRT_VERSION}" == "snapshots" ]]; then
            # Para snapshots, clonamos a branch master (ou a principal de desenvolvimento)
            git clone https://github.com/openwrt/openwrt.git --depth 1 openwrt_sdk
          else
            # Para releases, clonamos a tag específica
            git clone https://github.com/openwrt/openwrt.git -b ${OPENWRT_VERSION} --depth 1 openwrt_sdk
          fi
          cd openwrt_sdk

          echo "Atualizando e instalando feeds..."
          ./scripts/feeds update -a
          ./scripts/feeds install -a

          echo "Copiando código do pacote ${PACKAGE_NAME}..."
          mkdir -p package/${PACKAGE_NAME}
          # GITHUB_WORKSPACE é o diretório onde o seu repo (alexwbaule/telegramopenwrt) foi clonado
          cp -R ${GITHUB_WORKSPACE}/* package/${PACKAGE_NAME}/
          echo "Conteúdo copiado para package/${PACKAGE_NAME}:"
          ls -lA package/${PACKAGE_NAME}

          echo "Gerando configuração .config para target: ${TARGET_ARCH_INPUT}..."
          # Configuração do .config baseada no input TARGET_ARCH_INPUT
          # Exemplos:
          # 'x86/64' -> CONFIG_TARGET_x86=y, CONFIG_TARGET_x86_64=y, CONFIG_TARGET_x86_64_DEVICE_generic=y
          # 'mediatek/filogic' -> CONFIG_TARGET_mediatek=y, CONFIG_TARGET_mediatek_filogic=y (precisaria de um DEVICE específico)
          # 'ath79/generic' -> CONFIG_TARGET_ath79=y, CONFIG_TARGET_ath79_generic=y
          
          # NOTA: Para gerar pacotes .apk, você DEVE selecionar um target que sabidamente os utilize
          # em snapshots (ex: mediatek/filogic). A configuração abaixo é um exemplo para x86/64 (gera .ipk).
          # Adapte esta seção CUIDADOSAMENTE para o target desejado.
          
          # Limpa o .config para começar
          echo "" > .config

          if [[ "${TARGET_ARCH_INPUT}" == "x86/64" ]]; then
            echo "CONFIG_TARGET_x86=y" >> .config
            echo "CONFIG_TARGET_x86_64=y" >> .config
            echo "CONFIG_TARGET_x86_64_DEVICE_generic=y" >> .config
          elif [[ "${TARGET_ARCH_INPUT}" == "ath79/generic" ]]; then
            echo "CONFIG_TARGET_ath79=y" >> .config
            echo "CONFIG_TARGET_ath79_generic=y" >> .config
            echo "CONFIG_TARGET_BOARD=\"generic\"" >> .config
          elif [[ "${TARGET_ARCH_INPUT}" == "mediatek/filogic" ]]; then
            # Exemplo para mediatek/filogic - você precisará de um DEVICE específico.
            # Este é um placeholder e provavelmente precisará de ajuste para um device real.
            echo "CONFIG_TARGET_mediatek=y" >> .config
            echo "CONFIG_TARGET_mediatek_filogic=y" >> .config
            echo "CONFIG_TARGET_mediatek_filogic_DEVICE_generic=y" >> .config # Substitua 'generic' por um device válido se necessário
            echo "CONFIG_ALL_KMODS=y" >> .config # Pode ser necessário para alguns targets de snapshot
            echo "CONFIG_ALL_NONSHARED=y" >> .config
          else
            echo "::warning::Target não configurado explicitamente no workflow: ${TARGET_ARCH_INPUT}. Usando fallback para seleção manual ou erro."
            # Poderia adicionar uma configuração padrão ou falhar aqui
          fi
          
          # Seleciona o seu pacote para ser compilado como 'm' (módulo/pacote)
          # Hífens no nome do pacote são convertidos para underscores para CONFIG_PACKAGE_*
          CONFIG_PKG_NAME="CONFIG_PACKAGE_${PACKAGE_NAME//-/_}"
          echo "${CONFIG_PKG_NAME}=m" >> .config
          
          echo "Rodando make defconfig..."
          make defconfig
          
          echo "Configuração gerada (.config). Verificando seleção do pacote e dependências (curl, jq, libustream-openssl):"
          grep -E "${CONFIG_PKG_NAME}|CONFIG_PACKAGE_curl|CONFIG_PACKAGE_jq|CONFIG_PACKAGE_libustream_openssl" .config || echo "Algumas dependências podem não estar explicitamente no .config se forem parte do perfil do target."

      # Etapa 4: Compilação do pacote especificado
      - name: Compile the ${PACKAGE_NAME} package
        id: compile_step # ID para referenciar o status desta etapa
        run: |
          cd openwrt_sdk
          echo "Iniciando compilação do pacote ${PACKAGE_NAME}..."
          # V=s mostra mais detalhes da compilação (útil para depuração)
          # O comando make package/<nome>/compile constrói apenas o pacote e suas dependências.
          if make package/${PACKAGE_NAME}/compile V=s -j$(nproc); then
            echo "Compilação do pacote concluída com sucesso."
            echo "::set-output name=status::success"
            echo "Verificando arquivos de pacote gerados..."
            echo "Arquivos .ipk encontrados:"
            find bin/packages/ -name "${PACKAGE_NAME}*.ipk" -print || true
            echo "Arquivos .apk encontrados:"
            find bin/packages/ -name "${PACKAGE_NAME}*.apk" -print || true
          else
            echo "::error::Compilação do pacote ${PACKAGE_NAME} falhou."
            echo "::set-output name=status::failure"
            exit 1 # Falha o workflow se a compilação falhar
          fi

      # Etapa 5: Upload do pacote compilado como um artefato do GitHub Actions
      - name: Upload ${PACKAGE_NAME} package artifact
        # Executa apenas se a etapa de compilação (id: compile_step) foi bem-sucedida
        if: steps.compile_step.outputs.status == 'success'
        uses: actions/upload-artifact@v4
        with:
          # Nome do artefato que será exibido no GitHub
          name: ${{ env.PACKAGE_NAME }}-package-${{ env.OPENWRT_VERSION }}-${{ env.TARGET_ARCH_INPUT//\//_ }}
          # Caminhos para os arquivos a serem incluídos no artefato
          # Procura por .ipk e .apk para cobrir ambos os formatos
          path: |
            openwrt_sdk/bin/packages/*/*/${{ env.PACKAGE_NAME }}*.ipk
            openwrt_sdk/bin/packages/*/*/*/${{ env.PACKAGE_NAME }}*.ipk
            openwrt_sdk/bin/packages/*/*/${{ env.PACKAGE_NAME }}*.apk
            openwrt_sdk/bin/packages/*/*/*/${{ env.PACKAGE_NAME }}*.apk
          # O que fazer se nenhum arquivo for encontrado nos paths especificados
          if-no-files-found: error # Gera um erro se nenhum pacote for encontradoi
